"use strict";const todoForm=document.getElementById("form__todo"),todoList=document.querySelector(".todo__list"),listLengthEl=document.querySelector(".todo__list-items--number"),deleteModalEl=document.querySelector(".modal__delete"),toggleThemeBtn=document.querySelector(".toggle-theme"),sortContainers=document.querySelectorAll(".todo__list--sort"),clearCompletedBtn=document.querySelector("[data-clear]");let listArr=[];class Task{constructor(e){this.task=e,this._createListItem(),todoList.addEventListener("dragover",this._dragAndDropContainer.bind(this)),this._displayListLength()}_displayListLength(){listLengthEl.textContent=listArr.length}#e(){document.querySelectorAll(".todo__list--item").forEach((e=>{e.addEventListener("dragstart",(()=>{e.classList.add("dragging")})),e.addEventListener("dragend",(()=>{e.classList.remove("dragging")}))}))}#t(e){return[...todoList.querySelectorAll(".todo__list--item:not(.dragging)")].reduce(((t,s)=>{const i=s.getBoundingClientRect(),n=e-i.top-i.height/2;return n<0&&n>t.offset?{offset:n,element:s}:t}),{offset:Number.NEGATIVE_INFINITY}).element}_createListItem(){if(!this.task)return;const e=document.createElement("li");e.className="todo__list--item active",e.setAttribute("draggable","true"),e.innerHTML=`\n                  <div class="circle" data-checkable="false">\n                      <img\n                        src="images/icon-check.svg"\n                        alt="ckecked"\n                        class="checked-icon"\n                      />\n                    </div>\n                    <p class="todo__list--item__text">${this.task}</p>\n                    <div class="delete-icon">\n                      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18">\n            <path\n              fill="#9394a5"\n              fill-rule="evenodd"\n              d="M16.97 0l.708.707L9.546 8.84l8.132 8.132-.707.707-8.132-8.132-8.132 8.132L0 16.97l8.132-8.132L0 .707.707 0 8.84 8.132 16.971 0z"\n            />\n          </svg>\n                    </div>\n            `,todoList.insertAdjacentElement("afterbegin",e),listArr.unshift(e),this._displayListLength(),this.#e()}_dragAndDropContainer(e){const t=todoList.querySelector(".dragging"),s=this.#t(e.clientY);null===s?todoList.appendChild(t):todoList.insertBefore(t,s)}}class App extends Task{selectedListItem;constructor(e){super(e),todoForm.addEventListener("submit",this._submitTask.bind(this)),todoList.addEventListener("click",(e=>{this._checkListItem(e),this._displayModal(e)})),deleteModalEl.addEventListener("click",(e=>{this._handleModal(e)})),toggleThemeBtn.addEventListener("click",this._toggleTheme.bind(this)),clearCompletedBtn.addEventListener("click",this._clearCompletedTasks.bind(this))}#s(){const e=todoForm.querySelector("input");e.value="",e.focus()}#i(){deleteModalEl.classList.remove("hidden"),deleteModalEl.classList.add("show")}#n(){deleteModalEl.classList.remove("show"),deleteModalEl.classList.add("hidden")}#o(e){e.remove()}#a(e){const t=e.parentElement,s=listArr.indexOf(t);listArr.splice(s,1),this.#o(t),this._displayListLength(),this.#n()}#l(e,t){const s=document.querySelector(".background-img"),i=document.querySelector(".background");let n=`images/bg-desktop-${e}.jpg`,o=`switch to ${t} modus`,a=`switch to ${t} modus`,l=`\n        <picture>\n          <source\n            media="(max-width:599px)"\n            srcset="images/bg-mobile-${e}.jpg"\n          />\n          <source\n            media="(min-width:600px)"\n            srcset="images/bg-desktop-${e}.jpg"\n          />\n          <img\n            src="images/bg-mobile-${e}.jpg"\n            class="background-img"\n            aria-hidden="true"\n          />\n      </picture>\n      `;s.src=n,toggleThemeBtn.ariaLabel=o,toggleThemeBtn.alt=a,i.innerHTML=l}_submitTask(e){e.preventDefault();const t=todoForm.querySelector("input").value;""!==t&&(new Task(t),this.#s())}_checkListItem(e){e.target.classList.contains("circle")&&("false"===e.target.getAttribute("data-checkable")?(e.target.setAttribute("data-checkable","true"),e.target.parentElement.classList.add("checked"),e.target.parentElement.classList.remove("active")):(e.target.setAttribute("data-checkable","false"),e.target.parentElement.classList.remove("checked"),e.target.parentElement.classList.add("active")))}_displayModal(e){const t=e.target.closest(".delete-icon");this.selectedListItem=t,t&&this.#i()}_handleModal(e){if(e.target.classList.contains("accept"))this.#a(this.selectedListItem);else{if(!e.target.classList.contains("decline"))return;this.#n()}}_toggleTheme(){let e,t;document.documentElement.classList.contains("dark")?(e="light",t="dark",this.#l(e,t),toggleThemeBtn.src="images/icon-moon.svg",document.documentElement.classList.remove("dark")):(e="dark",t="light",this.#l(e,t),toggleThemeBtn.src="images/icon-sun.svg",document.documentElement.classList.add("dark"))}_clearCompletedTasks(){listArr.forEach((e=>{e.classList.contains("checked")&&this.#o(e);const t=listArr.filter((e=>!e.classList.contains("checked")));listArr=t,this._displayListLength()}))}}class SortingItems{constructor(){sortContainers.forEach((e=>e.addEventListener("click",this._sorting.bind(this))))}#r(e){document.querySelectorAll("p[data-sort]").forEach((e=>e.classList.remove("active"))),e.target.classList.add("active")}#d(e){document.querySelectorAll(".todo__list--item").forEach((t=>{t.classList.contains(e)?t.style.display="flex":t.style.display="none"}))}_sorting(e){if("all"===e.target.dataset.sort)this.#d("todo__list--item"),this.#r(e);else if("active"===e.target.dataset.sort)this.#d("active"),this.#r(e);else{if("completed"!==e.target.dataset.sort)return;this.#d("checked"),this.#r(e)}}}new Task("Complete Todo App on Frontend Mentor"),new Task("Pick up groceries"),new Task("Read for 1 hour"),new Task("10 minutes meditation"),new Task("Jog around the park 3x"),new Task("Complete online JavaScript course"),new App,new SortingItems;
//# sourceMappingURL=main.js.map